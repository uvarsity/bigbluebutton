<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">

	<mx:Script>
		<![CDATA[
      import org.bigbluebutton.main.events.MadePresenterEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.modules.polling.events.ModuleEvent;
      import org.bigbluebutton.modules.polling.events.CreatePollWindowEvent;
      import org.bigbluebutton.modules.polling.events.PollMainWindowEvent;
      import org.bigbluebutton.modules.polling.events.PollResultWindowEvent;
      import org.bigbluebutton.modules.polling.events.PollUpdateWindowEvent;
      import org.bigbluebutton.modules.polling.events.OpenSavedPollEvent;
      import org.bigbluebutton.modules.polling.events.TakePollWindowEvent;
      import org.bigbluebutton.modules.polling.events.PollEvent;
      import org.bigbluebutton.modules.polling.managers.PollingWindowManager;
      import org.bigbluebutton.modules.polling.model.PollingModel;
		]]>
				
	</mx:Script>
	
	<EventHandlers type="{ModuleEvent.START}">
		<ObjectBuilder generator="{PollingWindowManager}"/>	
		<MethodInvoker generator="{PollingWindowManager}" method="initialize"/>
	</EventHandlers>	
	
	<EventHandlers type="{ModuleEvent.STOP}">
	</EventHandlers>	

  <EventHandlers type="{CreatePollWindowEvent.OPEN_WINDOW}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handleOpenCreatePollWindowEvent" />
  </EventHandlers>

  <EventHandlers type="{CreatePollWindowEvent.CLOSE_WINDOW}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handleCloseCreatePollWindowEvent" />
  </EventHandlers>
  
	<EventHandlers type="{PollMainWindowEvent.OPEN_WINDOW}">
		<MethodInvoker generator="{PollingWindowManager}"   method="handleOpenPollMainWindowEvent" />
	</EventHandlers>

  <EventHandlers type="{PollMainWindowEvent.CLOSE_WINDOW}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handleClosePollMainWindowEvent" />
  </EventHandlers>
  
	<EventHandlers type="{PollEvent.SHOW_POLL_RESULT}">
		<MethodInvoker generator="{PollingWindowManager}"   method="handleOpenPollResultWindowEvent" arguments="{event}"/>
	</EventHandlers>

  <EventHandlers type="{PollResultWindowEvent.CLOSE_WINDOW}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handleClosePollResultWindowEvent"/>
  </EventHandlers>
  
  <EventHandlers type="{PollEvent.POLL_STARTED}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handlePollStartedEvent" arguments="{event}"/>
  </EventHandlers>
  
  <EventHandlers type="{PollEvent.POLL_STOPPED}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handlePollStoppedEvent" arguments="{event}"/>
  </EventHandlers>
  
	<EventHandlers type="{PollEvent.EDIT_POLL_REQUEST}">
		<MethodInvoker generator="{PollingWindowManager}"   method="handleEditPollRequestEvent" arguments="{event}"/>
	</EventHandlers>

  <EventHandlers type="{PollEvent.USER_RESPONDED}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handleUserRespondedEvent" arguments="{event}"/>
  </EventHandlers>
  
  <EventHandlers type="{PollUpdateWindowEvent.CLOSE_WINDOW}">
    <MethodInvoker generator="{PollingWindowManager}"   method="handleCloseEditPollEvent"/>
  </EventHandlers>
  
	<EventHandlers type="{TakePollWindowEvent.CLOSE_WINDOW}">
		<MethodInvoker generator="{PollingWindowManager}"  method="handleCloseTakePollWindowEvent"/>
	</EventHandlers>
		
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}">
		<MethodInvoker generator="{PollingWindowManager}" method="handleMadePresenterEvent" arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
		<MethodInvoker generator="{PollingWindowManager}" method="handleMadeViewerEvent" arguments="{event}"/>
	</EventHandlers>	
	
	<Injectors target="{PollingWindowManager}">
		<PropertyInjector targetKey="model" source="{PollingModel}" />
		<PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
	</Injectors>
    
  <Debugger level="{Debugger.ALL}" />
</EventMap>
